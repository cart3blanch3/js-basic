// Напишите функцию, которая проверяет, является ли число целым используя побитовые операторы
function isInteger(n) {
    // Для проверки, используется побитовая операция «или» (|) с 0, которая усекает дробную часть числа, если она есть.
    // Если результат этой операции равен исходному числу, то оно является целым.
    return (n | 0) === n;
}

// Напишите функцию, которая возвращает массив четных чисел от 2 до 20 включительно
function even() {
    // Создание пустого массива result для хранения четных чисел.
    const result = [];
    // Итерация по четным числам от 2 до 20 включительно с шагом 2.
    for (let i = 2; i <= 20; i += 2) {
        // Добавление текущего четного числа в массив result.
        result.push(i);
    }
    // Возвращение массива result, содержащего четные числа от 2 до 20.
    return result;
}

// Напишите функцию, считающую сумму чисел до заданного используя цикл
function sumTo(n) {
    // Инициализация переменной sum с нулевым значением для хранения суммы.
    let sum = 0;
    // Итерация по числам от 1 до n включительно.
    for (let i = 1; i <= n; i++) {
        // На каждой итерации прибавляем текущее значение i к сумме.
        sum += i;
    }
    // Возвращаем вычисленную сумму.
    return sum;
}

// Напишите функцию, считающую сумму чисел до заданного используя рекурсию
function recSumTo(n) {
    // Базовый случай: если n равно 1, возвращаем 1.
    if (n === 1) {
        return 1;
    }
    // Рекурсивный вызов функции с уменьшением аргумента n на 1 и добавлением к текущему n.
    return n + recSumTo(n - 1);
}

// Напишите функцию, считающую факториал заданного числа
function factorial(n) {
    // Базовый случай: если n равно 0, возвращаем 1.
    if (n === 0) {
        return 1;
    }
    // Рекурсивный вызов функции с уменьшением аргумента n на 1 и умножением на текущий n.
    return n * factorial(n - 1);
}

// Напишите функцию, которая определяет, является ли число двойкой, возведенной в степень
function isBinary(n) {
    // Условие (n & (n - 1)) === 0 гарантирует, что у числа n только один установленный бит.
    // Проверка n !== 0 исключает случай, когда n равно 0.
    // Если оба условия выполняются, функция возвращает true, иначе - false.
    return (n & (n - 1)) === 0 && n !== 0;
}

// Напишите функцию, которая находит N-е число Фибоначчи
function fibonacci(n) {
    // Базовый случай: если n меньше или равно 1, возвращаем n.
    if (n <= 1) {
        return n;
    }

    // Итеративный расчет числа в последовательности Фибоначчи.
    let a = 0;
    let b = 1;
    for (let i = 2; i <= n; i++) {
        // Вычисление следующего числа в последовательности и обновление переменных a и b.
        const temp = a + b;
        a = b;
        b = temp;
    }

    // Возвращение последнего вычисленного значения, соответствующего n-ному числу Фибоначчи.
    return b;
}

/** Напишите функцию, которая принимает начальное значение и функцию операции
 * и возвращает функцию - выполняющую эту операцию.
 * Если функция операции (operatorFn) не задана - по умолчанию всегда
 * возвращается начальное значение (initialValue)
 * @param initialValue
 * @param operatorFn - (storedValue, newValue) => {operation}
 * @example
 * const sumFn =  getOperationFn(10, (a,b) => a + b);
 * console.log(sumFn(5)) - 15
 * console.log(sumFn(3)) - 18
 */
function getOperationFn(initialValue, operatorFn) {
    // Проверка: если оператор не передан, возвращаем функцию, возвращающую начальное значение.
    if (!operatorFn) {
        return (newValue) => initialValue;
    }

    // Возвращаем функцию, которая принимает новое значение, применяет к нему оператор и обновляет initialValue.
    return (newValue) => {
        initialValue = operatorFn(initialValue, newValue);
        return initialValue;
    };
}

/**
 * Напишите функцию создания генератора арифметической последовательности.
 * При ее вызове, она возвращает новую функцию генератор - generator().
 * Каждый вызов функции генератора возвращает следующий элемент последовательности.
 * Если начальное значение не передано, то оно равно 0.
 * Если шаг не указан, то по дефолту он равен 1.
 * Генераторов можно создать сколько угодно - они все независимые.
 *
 * @param {number} start - число с которого начинается последовательность
 * @param {number} step  - число шаг последовательности
 * @example
 * const generator = sequence(5, 2);
 * console.log(generator()); // 5
 * console.log(generator()); // 7
 * console.log(generator()); // 9
 */
function sequence(start = 0, step = 1) {
    // Возвращается функция-генератор, которая при каждом вызове возвращает текущее значение и обновляет его в соответствии с шагом.
    return function generator() {
        // Захват текущего значения start.
        const current = start;
        // Обновление start в соответствии с шагом.
        start += step;
        // Возвращение текущего значения.
        return current;
    };
}

/**
 * Напишите функцию deepEqual, которая принимает два значения
 * и возвращает true только в том случае, если они имеют одинаковое значение
 * или являются объектами с одинаковыми свойствами,
 * значения которых также равны при сравнении с рекурсивным вызовом deepEqual.
 * Учитывать специфичные объекты(такие как Date, RegExp итп) не обязательно
 *
 * @param {object} firstObject - первый объект
 * @param {object} secondObject - второй объект
 * @returns {boolean} - true если объекты равны(по содержанию) иначе false
 * @example
 * deepEqual({arr: [22, 33], text: 'text'}, {arr: [22, 33], text: 'text'}) // true
 * deepEqual({arr: [22, 33], text: 'text'}, {arr: [22, 3], text: 'text2'}) // false
 */
function deepEqual(firstObject, secondObject) {
    // Проверка: если объекты идентичны по ссылке, они глубоко равны.
    if (firstObject === secondObject) {
        return true;
    }

    // Проверка: если хотя бы один из аргументов не является объектом, объекты не могут быть равными.
    if (
        typeof firstObject !== 'object' ||
        firstObject === null ||
        typeof secondObject !== 'object' ||
        secondObject === null
    ) {
        // Дополнительная проверка: если оба аргумента - NaN, они равны.
        if (Number.isNaN(firstObject) && Number.isNaN(secondObject)) {
            return true;
        }
        // Если хотя бы одно из условий выполняется, объекты не равны.
        return false;
    }

    // Получение ключей объектов для сравнения их структуры.
    const keys1 = Object.keys(firstObject);
    const keys2 = Object.keys(secondObject);

    // Проверка: если количество ключей не совпадает, объекты не равны.
    if (keys1.length !== keys2.length) {
        return false;
    }

    // Проверка: рекурсивное сравнение значений каждого ключа.
    for (let key of keys1) {
        // Если ключ из первого объекта отсутствует во втором или их значения не равны, объекты не равны.
        if (
            !keys2.includes(key) ||
            !deepEqual(firstObject[key], secondObject[key])
        ) {
            return false;
        }
    }

    // Если все проверки пройдены, объекты равны.
    return true;
}

module.exports = {
    isInteger,
    even,
    sumTo,
    recSumTo,
    factorial,
    isBinary,
    fibonacci,
    getOperationFn,
    sequence,
    deepEqual,
};
